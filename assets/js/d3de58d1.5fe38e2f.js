"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5764],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),s=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=s(t),m=o,f=d["".concat(l,".").concat(m)]||d[m]||p[m]||i;return t?r.createElement(f,a(a({ref:n},u),{},{components:t})):r.createElement(f,a({ref:n},u))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=d;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var s=2;s<i;s++)a[s]=t[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},28367:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>c,toc:()=>s});var r=t(87462),o=(t(67294),t(3905));const i={},a=void 0,c={unversionedId:"Customization/ico",id:"Customization/ico",title:"ico",description:"ico is expected to be a folder that contains modules that link to icons.",source:"@site/docs/Customization/ico.md",sourceDirName:"Customization",slug:"/Customization/ico",permalink:"/PowerHorseEngine/docs/Customization/ico",draft:!1,editUrl:"https://github.com/lanzoinc/PowerHorseEngine/edit/main/docs/Customization/ico.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Config",permalink:"/PowerHorseEngine/docs/Customization/Config"},next:{title:"libs",permalink:"/PowerHorseEngine/docs/Customization/libs"}},l={},s=[{value:"ico-mdi",id:"ico-mdi",level:2}],u={toc:s};function p(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"ico")," is expected to be a folder that contains modules that link to icons."),(0,o.kt)("h2",{id:"ico-mdi"},"ico-mdi"),(0,o.kt)("p",null,"Some CoreScripts use ",(0,o.kt)("inlineCode",{parentName:"p"},"ico-mdi")," which is Material Design Icons. To implement create a new ",(0,o.kt)("inlineCode",{parentName:"p"},"ModuleScript")," inside your ",(0,o.kt)("inlineCode",{parentName:"p"},"ico")," folder named ",(0,o.kt)("inlineCode",{parentName:"p"},"mdi")," and paste the follow source:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'-- Written by Olanzo James @ Lanzo, Inc.\n-- Saturday, September 24 2022 @ 08:50:06\n-- Credit to Google Inc and Qweery\n-- Core icons uses mdi, removing this from your experience will make some icons not be shown.\n-- Cached.\n\nlocal mdipackage = 11024471495;\nlocal InsertService = game:GetService("InsertService");\nlocal package;\nlocal RunService = game:GetService("RunService");\nlocal IsRunning,IsClient = RunService:IsRunning(),RunService:IsClient();\n\n\n--\x3e loads from external source to lower Engine\'s size (only use the package when needed, sorta better\n    local s,r = pcall(function()\n        if(IsRunning and IsClient)then \n            return nil;\n        end;\n        return InsertService:LoadAsset(mdipackage):GetChildren()[1];\n    end);\n    if(not s)then\n        warn("mdi FATAL ERROR: ",r);\n        return {} --\x3e icons will not load, you will get warnings like: (could not find ico path ico-mdi@communication/list_alt failed @ communication)\n    end;\n    if(IsRunning)then\n        if(IsClient)then\n            --\x3e this module should not exist/replicate onto clients. if so then your icons will fail until the proper module is loaded\n            script.Parent = nil;\n            script:Destroy();\n            -- print("Destroyed",script.Parent)\n            return "$wait";\n        end\n        --\x3e In game, we load the actual module, this way it is replicated to clients. A corescript does this for us on start.\n        local icons = r.Icons;\n        icons.Name = script.Name;\n        icons.Parent = script.Parent;\n        script:Destroy();\n        return require(icons);\n    end;\n    package = require(r.Icons);\nreturn package;\n\n')))}p.isMDXComponent=!0}}]);