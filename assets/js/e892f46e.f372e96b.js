"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2203],{44649:t=>{t.exports=JSON.parse('{"functions":[],"properties":[],"types":[],"name":"StateLibrary","desc":"The state library is a library that manages states across your software. It elimates having the create a state with\\nthe .new constructor.\\n\\n:::warning\\nThis Library is only called `StateLibrary` for documentation purposes! You\'ll use `:Import(\\"State\\")` to access this library not `:Import(\\"StateLibrary\\")`.\\n:::\\n\\nYou can create new state by calling the state library as a function, it takes an optional argument of the default value of the state\\n```lua\\n\\tlocal State = :Import(\\"State\\");\\n\\n\\tlocal NumberState = State(0);\\n```\\n\\nThe state function returns the new created state and a set function which you can use to set the state later on.\\n\\n```lua\\n\\tlocal State = :Import(\\"State\\");\\n\\n\\tlocal NumberState,setNumberState = State(0);\\n\\n\\ttask.wait(2);\\n\\tsetNumberState(1) --\x3e NumberState will now be one\\n```\\n\\nYou can also use a callback function when using the set function, here you will be provided with the old state as an argument\\n```lua\\n\\tsetNumberState(function(oldState)\\n\\t\\treturn oldState+1; --\x3e NumberState will now be 2, because it was previously 1\\n\\tend);\\n```","tags":["Library"],"source":{"line":39,"path":"src/Core/Libraries/State.lua"}}')}}]);