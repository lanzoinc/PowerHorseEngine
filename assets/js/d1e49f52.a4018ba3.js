"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6999],{26757:e=>{e.exports=JSON.parse('{"functions":[{"name":"Replicate","desc":"Creates a new replication token for the pseudo","params":[],"returns":[],"function_type":"method","source":{"line":50,"path":"src/Pseudo/Core/Classes/Pseudo.lua"}},{"name":"GetFullName","desc":"","params":[],"returns":[{"desc":"","lua_type":"string\\n"}],"function_type":"method","source":{"line":65,"path":"src/Pseudo/Core/Classes/Pseudo.lua"}},{"name":"WaitForChild","desc":"","params":[{"name":"name","desc":"","lua_type":"string"},{"name":"onlyPseudo","desc":"","lua_type":"boolean"},{"name":"tries","desc":"","lua_type":"number?"}],"returns":[{"desc":"","lua_type":"Pseudo | Instance | nil"}],"function_type":"method","source":{"line":71,"path":"src/Pseudo/Core/Classes/Pseudo.lua"}},{"name":"FindFirstAncestor","desc":"This will call :FindFirstAncestor on it\'s parent, so if the parent is a ROBLOX Instance, it will then use FindFirstAncestor of `Instances` not `Pseudos`.","params":[{"name":"name","desc":"","lua_type":"string"},{"name":"level","desc":"","lua_type":"number?"}],"returns":[{"desc":"","lua_type":"Pseudo | Instance | nil"}],"function_type":"method","source":{"line":88,"path":"src/Pseudo/Core/Classes/Pseudo.lua"}},{"name":"FindFirstAncestorOfClass","desc":"","params":[{"name":"name","desc":"","lua_type":"string"},{"name":"level","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"Pseudo | Instance | nil"}],"function_type":"method","source":{"line":102,"path":"src/Pseudo/Core/Classes/Pseudo.lua"}},{"name":"FindFirstAncestorWhichIsA","desc":"","params":[{"name":"name","desc":"","lua_type":"string"},{"name":"level","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"Pseudo | Instance | nil"}],"function_type":"method","source":{"line":117,"path":"src/Pseudo/Core/Classes/Pseudo.lua"}},{"name":"FindFirstChild","desc":"","params":[{"name":"name","desc":"","lua_type":"string"},{"name":"recursive","desc":"","lua_type":"boolean?"},{"name":"onlyPseudo","desc":"","lua_type":"boolean?"}],"returns":[{"desc":"","lua_type":"Pseudo | Instance | nil"}],"function_type":"method","source":{"line":133,"path":"src/Pseudo/Core/Classes/Pseudo.lua"}},{"name":"FindFirstChildOfClass","desc":"","params":[{"name":"name","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"Pseudo | Instance | nil"}],"function_type":"method","source":{"line":151,"path":"src/Pseudo/Core/Classes/Pseudo.lua"}},{"name":"FindFirstChildWhichIsA","desc":"","params":[{"name":"name","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"Pseudo | Instance | nil"}],"function_type":"method","source":{"line":162,"path":"src/Pseudo/Core/Classes/Pseudo.lua"}},{"name":"GetChildren","desc":"","params":[{"name":"onlyPseudo","desc":"","lua_type":"boolean"}],"returns":[{"desc":"","lua_type":"table\\n"}],"function_type":"method","source":{"line":194,"path":"src/Pseudo/Core/Classes/Pseudo.lua"}},{"name":"_pseudoInit","desc":"","params":[],"returns":[],"function_type":"method","private":true,"source":{"line":228,"path":"src/Pseudo/Core/Classes/Pseudo.lua"}},{"name":"SerializePropsAsync","desc":"","params":[],"returns":[],"function_type":"method","source":{"line":370,"path":"src/Pseudo/Core/Classes/Pseudo.lua"}},{"name":"DeserializePropsAsync","desc":"","params":[{"name":"Serialized","desc":"","lua_type":"string"},{"name":"Apply","desc":"","lua_type":"boolean"}],"returns":[{"desc":"","lua_type":"table\\n"}],"function_type":"method","source":{"line":376,"path":"src/Pseudo/Core/Classes/Pseudo.lua"}},{"name":"GET","desc":"","params":[{"name":"Comp","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"any?\\n"}],"function_type":"method","source":{"line":388,"path":"src/Pseudo/Core/Classes/Pseudo.lua"}},{"name":"Clone","desc":"Clones the `Pseudo`. It also will clone Instances inside the Pseudo that wasn\'t created by the Pseudo itself. Pseudo\'s must follow\\na naming convention to properly support cloning.","params":[],"returns":[{"desc":"","lua_type":"Pseudo"}],"function_type":"method","source":{"line":397,"path":"src/Pseudo/Core/Classes/Pseudo.lua"}},{"name":"Destroy","desc":"Destroys the Reference, You can overwrite this by creating your own :Destroy method but make sure to include:\\n```lua\\nself:GetRef():Destroy()\\n```","params":[],"returns":[],"function_type":"method","source":{"line":431,"path":"src/Pseudo/Core/Classes/Pseudo.lua"}},{"name":"GetPropertyChangedSignal","desc":"","params":[{"name":"Prop","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"PHeSignal"}],"function_type":"method","source":{"line":439,"path":"src/Pseudo/Core/Classes/Pseudo.lua"}},{"name":"IsA","desc":"","params":[{"name":"Class","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"boolean\\n"}],"function_type":"method","source":{"line":468,"path":"src/Pseudo/Core/Classes/Pseudo.lua"}},{"name":"_GetAppModule","desc":"","params":[],"returns":[{"desc":"","lua_type":"PowerHorseEngine"}],"function_type":"method","source":{"line":481,"path":"src/Pseudo/Core/Classes/Pseudo.lua"}},{"name":"_GetCompRef","desc":"Some Pseudo\'s may have `_Appender` Instances or `FatherComponent`\'s :_GetCompRef will return those. If they don\'t exist then\\nit return the Ref.","params":[],"returns":[{"desc":"","lua_type":"any\\n"}],"function_type":"method","source":{"line":493,"path":"src/Pseudo/Core/Classes/Pseudo.lua"}},{"name":"GetRef","desc":"Returns the Reference Instance of the Pseudo, this will most likely be a `Folder` containing the attributes. Whenever this Ref is destroyed, the Pseudo is destroyed aswell.","params":[],"returns":[{"desc":"","lua_type":"Folder|any\\n"}],"function_type":"method","source":{"line":499,"path":"src/Pseudo/Core/Classes/Pseudo.lua"}},{"name":"AddEventListener","desc":"","params":[{"name":"EventName","desc":"","lua_type":"string"},{"name":"CreatingEvent","desc":"","lua_type":"boolean?"},{"name":"BindCreateToEvent","desc":"","lua_type":"BindableEvent?"},{"name":"SharedSignal","desc":"","lua_type":"boolean?"}],"returns":[{"desc":"","lua_type":"PHeSignal"}],"function_type":"method","source":{"line":506,"path":"src/Pseudo/Core/Classes/Pseudo.lua"}},{"name":"RemoveEventListener","desc":"","params":[{"name":"...","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"nil\\n"}],"function_type":"method","source":{"line":533,"path":"src/Pseudo/Core/Classes/Pseudo.lua"}},{"name":"RemoveEventListeners","desc":"","params":[],"returns":[{"desc":"","lua_type":"nil\\n"}],"function_type":"method","source":{"line":546,"path":"src/Pseudo/Core/Classes/Pseudo.lua"}},{"name":"GetEventListener","desc":"","params":[{"name":"Listener","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"PHeSignal"}],"function_type":"method","source":{"line":556,"path":"src/Pseudo/Core/Classes/Pseudo.lua"}},{"name":"_lockProperty","desc":"","params":[{"name":"propertyName","desc":"","lua_type":"string"},{"name":"propertyCallback","desc":"","lua_type":"string?"}],"returns":[],"function_type":"method","private":true,"source":{"line":562,"path":"src/Pseudo/Core/Classes/Pseudo.lua"}},{"name":"_lockProperties","desc":"","params":[{"name":"...","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","private":true,"source":{"line":576,"path":"src/Pseudo/Core/Classes/Pseudo.lua"}},{"name":"_unlockProperty","desc":"","params":[{"name":"...","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","private":true,"source":{"line":584,"path":"src/Pseudo/Core/Classes/Pseudo.lua"}},{"name":"ShareValue","desc":"Value that is stored on both the server and the client, sharedValues can only be set on the server","params":[{"name":"Key","desc":"","lua_type":"string"},{"name":"Value","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","deprecated":{"version":"v0.2.0","desc":"This Method was deprecated early in development, but still accessible. We really do not recommend using it."},"source":{"line":602,"path":"src/Pseudo/Core/Classes/Pseudo.lua"}},{"name":"UseVar","desc":"","params":[{"name":"Variable","desc":"","lua_type":"string"},{"name":"newValue","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"nil\\n"}],"function_type":"method","deprecated":{"version":"v0.2.0","desc":"This Method was deprecated early in development, but still accessible. We really do not recommend using it."},"source":{"line":628,"path":"src/Pseudo/Core/Classes/Pseudo.lua"}},{"name":"_usenestvar","desc":"","params":[{"name":"Variable","desc":"","lua_type":"string"},{"name":"newValue","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","deprecated":{"version":"v0.2.0","desc":"This Method was deprecated early in development, but still accessible. We really do not recommend using it."},"source":{"line":640,"path":"src/Pseudo/Core/Classes/Pseudo.lua"}}],"properties":[{"name":"Name","desc":"","lua_type":"string","source":{"line":33,"path":"src/Pseudo/Core/Classes/Pseudo.lua"}},{"name":"ClassName","desc":"","lua_type":"string","readonly":true,"source":{"line":38,"path":"src/Pseudo/Core/Classes/Pseudo.lua"}},{"name":"Parent","desc":"  \\n:::warning\\nIf a Pseudo is Parented to another Pseudo, then .Parent will return the `Pseudo`, whereas if it\'s parented to an `Instance` you will get the ROBLOX Instance.\\n:::","lua_type":"any","source":{"line":46,"path":"src/Pseudo/Core/Classes/Pseudo.lua"}}],"types":[],"name":"Pseudo","desc":"","source":{"line":28,"path":"src/Pseudo/Core/Classes/Pseudo.lua"}}')}}]);